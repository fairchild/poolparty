#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), "..", "lib"))
require "poolparty"

extra_help_string = <<-EOE

  Cloud configure
  
    Cloud configure will repackage the deployment and send it off to a 
    remote instance from within the cloud. It then will reconfigure
    itself and alert the rest of the cloud
    
EOE

o = PoolParty::Optioner.new(ARGV, {:extra_help => extra_help_string}) do |opts, optioner|
  opts.on('-n cloudname', '--name name', 'Start cloud by this name')    { |c| optioner.cloudname c }
  opts.on('-i num', '--num i', 'Instance number')    { |i| optioner.inst_num i.to_i }
end

o.loaded_clouds.each do |cld|
  # If an IP or DNS name is given, bootstrap that node, otherwise, bootstrap all running nodes.
  # ::FileUtils.rm_rf "#{Default.tmp_path}/" unless o.testing?
  
  if cld.nodes(:status => "running").size < 1
    puts header("No instances running")
  else
    nodes = !o.unflagged_args.empty? ?  o.unflagged_args : cld.nodes(:status => "running").collect {|i| i.ip }.sort.compact
    if nodes.empty?
      puts "No nodes to configure"
    else
      if o.inst_num?
        vputs "Configuring #{nodes[o.inst_num]}"
        ::PoolParty::Provision::DrConfigure.new( nodes[o.inst_num], :cloud => cld )
      else
        nodes.each do |address|
          puts "Configuring: #{address}"
          ::PoolParty::Provision::DrConfigure.new( address, :cloud => cld )
        end
      end
    end
  end
end

